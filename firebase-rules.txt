rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if request.auth != null && 
                   request.auth.token.email_verified && 
                   resource.data.userId == request.auth.uid;

      allow create: if request.auth != null && 
                     request.auth.token.email_verified && 
                     request.resource.data.userId == request.auth.uid;

      allow update, delete: if request.auth != null && 
                             request.auth.token.email_verified && 
                             resource.data.userId == request.auth.uid;

      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth != null && 
                            request.auth.token.email_verified && 
                            get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid;
      }
    }

    // Users collection
    match /users/{userId} {
      // User can only read their own data
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow initial data creation at registration
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow all updates if email is verified
      allow write: if request.auth != null && 
                    request.auth.uid == userId && 
                    request.auth.token.email_verified;

      // Non-verified email users can update lastActive or emailVerified fields
      allow update: if request.auth != null && 
                     request.auth.uid == userId && 
                     !request.auth.token.email_verified && 
                     (
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['emailVerified']) ||
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActive']) ||
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActive', 'preferences'])
                     );
      
      // Memories subcollection
      match /memories/{memoryId} {
        allow read, write: if request.auth != null && 
                            request.auth.uid == userId && 
                            request.auth.token.email_verified;
      }
    }
  }
} 