rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if request.auth != null && 
                   request.auth.token.email_verified && 
                   resource.data.userId == request.auth.uid;

      allow create: if request.auth != null && 
                     request.auth.token.email_verified && 
                     request.resource.data.userId == request.auth.uid;

      allow update, delete: if request.auth != null && 
                             request.auth.token.email_verified && 
                             resource.data.userId == request.auth.uid;

      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth != null && 
                            request.auth.token.email_verified && 
                            get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid;
        
        // Allow delete for account deletion - user can delete their own messages
        allow delete: if request.auth != null && 
                       request.auth.token.email_verified && 
                       get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid;
      }
    }

    // Users collection
    match /users/{userId} {
      // User can read their own data regardless of email verification
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow initial data creation at registration, regardless of email verification
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow all updates if email is verified
      allow write: if request.auth != null && 
                    request.auth.uid == userId && 
                    request.auth.token.email_verified;

      // Non-verified email users can update lastActive or emailVerified fields
      allow update: if request.auth != null && 
                     request.auth.uid == userId && 
                     !request.auth.token.email_verified && 
                     (
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['emailVerified']) ||
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActive']) ||
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActive', 'preferences'])
                     );

      // Allow users to delete their own account data (for account deletion)
      allow delete: if request.auth != null && 
                     request.auth.token.email_verified && 
                     request.auth.uid == userId;
      
      // Memories subcollection - requires email verification
      match /memories/{memoryId} {
        allow read, write: if request.auth != null && 
                            request.auth.uid == userId && 
                            request.auth.token.email_verified;
        
        // Allow delete for account deletion - user can delete their own memories
        allow delete: if request.auth != null && 
                       request.auth.token.email_verified && 
                       request.auth.uid == userId;
      }
    }

    // Global memories collection (if using top-level memories instead of subcollection)
    match /memories/{memoryId} {
      allow read, write: if request.auth != null && 
                          request.auth.token.email_verified && 
                          resource.data.userId == request.auth.uid;
      
      // Allow delete for account deletion - user can delete their own memories
      allow delete: if request.auth != null && 
                     request.auth.token.email_verified && 
                     resource.data.userId == request.auth.uid;
    }

    // Feedback collection - for AI response feedback
    match /feedback/{feedbackId} {
      // Users can only create feedback, not read or update
      // Only authenticated users with verified email can submit feedback
      allow create: if request.auth != null && 
                     request.auth.token.email_verified &&
                     request.resource.data.userId == request.auth.uid &&
                     // Ensure required fields are present
                     request.resource.data.keys().hasAll(['userId', 'userMessage', 'aiMessage', 'reason', 'description', 'createdAt', 'status']) &&
                     // Ensure status is set to 'pending' for new feedback
                     request.resource.data.status == 'pending' &&
                     // Validate reason is one of the allowed values
                     request.resource.data.reason in ['inappropriate', 'not_enough', 'incorrect', 'unhelpful', 'too_generic', 'off_topic', 'technical_issue', 'other'] &&
                     // Ensure description is not empty and not too long
                     request.resource.data.description is string &&
                     request.resource.data.description.size() > 0 &&
                     request.resource.data.description.size() <= 1000;
      
      // No read or update permissions for regular users
      // Only admins should be able to read and update feedback
      allow read, update: if false;
    }
  }
}
